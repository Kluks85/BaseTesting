{
	"info": {
		"_postman_id": "043a521b-377b-4d58-9024-37d0a0797d59",
		"name": "Auto test createCoreOwner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26472165"
	},
	"item": [
		{
			"name": "Создаём сессию и куки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"kolchin@mcn.ru\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base}}/api/public/api/auth/authorization",
					"host": [
						"{{base}}"
					],
					"path": [
						"api",
						"public",
						"api",
						"auth",
						"authorization"
					]
				},
				"description": "The first step for the user to login. Returns the login type and sets a cookie for the login"
			},
			"response": [
				{
					"name": "If the server is available, it always responds with code 200 or 201. Error code 400 and higher will replace the ok field: it equals false and the error text in the error field. If the input data does not pass validation, the error field contains an object",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/public/api/auth/authorization",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"api",
								"auth",
								"authorization"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"uid\": \"<string>\",\n  \"type\": \"phone\",\n  \"authMethod\": \"google\",\n  \"twoFa\": {\n    \"active\": \"<boolean>\",\n    \"step\": 1\n  }\n}"
				},
				{
					"name": "entityNotFound",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/public/api/auth/authorization",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"api",
								"auth",
								"authorization"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "internalServerError",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/public/api/auth/authorization",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"api",
								"auth",
								"authorization"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Логинем пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"Klukva1985K\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base}}/api/public/api/auth/authorization/confirm",
					"host": [
						"{{base}}"
					],
					"path": [
						"api",
						"public",
						"api",
						"auth",
						"authorization",
						"confirm"
					]
				},
				"description": "The last step of login. Login user and redirects the user to the dashboard"
			},
			"response": [
				{
					"name": "If the server is available, it always responds with code 200 or 201. Error code 400 and higher will replace the ok field: it equals false and the error text in the error field. If the input data does not pass validation, the error field contains an object",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"confirmCode\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/public/api/auth/authorization/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"api",
								"auth",
								"authorization",
								"confirm"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"is2Fa\": \"<boolean>\",\n  \"authType\": \"email\",\n  \"authData\": \"<string>\",\n  \"step\": \"<number>\"\n}"
				},
				{
					"name": "entityNotFound",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"confirmCode\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/public/api/auth/authorization/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"api",
								"auth",
								"authorization",
								"confirm"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "internalServerError",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"confirmCode\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/public/api/auth/authorization/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"api",
								"auth",
								"authorization",
								"confirm"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Создаём овнера",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"let temp = jsonData.result;\r",
							"//pm.globals.set(\"result\", temp);\r",
							"pm.environment.set(\"result\", temp);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{$randomEmail}}\", \n  \"fullName\": \"{{$randomFullName}}\",\n  \"contractId\": 132139\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base}}/api/private/api/user/createCoreOwner",
					"host": [
						"{{base}}"
					],
					"path": [
						"api",
						"private",
						"api",
						"user",
						"createCoreOwner"
					]
				},
				"description": "Create a core owner in contract"
			},
			"response": [
				{
					"name": "If the server is available, it always responds with code 200 or 201. Error code 400 and higher will replace the ok field: it equals false and the error text in the error field. If the input data does not pass validation, the error field contains an object",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"fullName\": \"<string>\",\n  \"contractId\": \"<number>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/private/api/user/createCoreOwner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"private",
								"api",
								"user",
								"createCoreOwner"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "<number>"
				}
			]
		},
		{
			"name": "Удаляем роль Овнера у юзера",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user_id\": \"{{result}}\",\n  \"contract_id\": \"132139\",\n  \"role_id\": \"31\",\n  \"all_roles\": \"true\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base}}/api/protected/api/user/removeRole",
					"host": [
						"{{base}}"
					],
					"path": [
						"api",
						"protected",
						"api",
						"user",
						"removeRole"
					]
				},
				"description": "Remove a role to the user"
			},
			"response": [
				{
					"name": "If the server is available, it always responds with code 200 or 201. Error code 400 and higher will replace the ok field: it equals false and the error text in the error field. If the input data does not pass validation, the error field contains an object",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"<number>\",\n  \"contract_id\": \"<number>\",\n  \"role_id\": \"<number>\",\n  \"all_roles\": \"<boolean>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/protected/api/user/removeRole",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"api",
								"user",
								"removeRole"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Удаляем все роли у юзера",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user_id\": {{result}}\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base}}/api/protected/api/user/removeFromContracts",
					"host": [
						"{{base}}"
					],
					"path": [
						"api",
						"protected",
						"api",
						"user",
						"removeFromContracts"
					]
				},
				"description": "Remove a user from all contracts"
			},
			"response": [
				{
					"name": "If the server is available, it always responds with code 200 or 201. Error code 400 and higher will replace the ok field: it equals false and the error text in the error field. If the input data does not pass validation, the error field contains an object",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"<number>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/protected/api/user/removeFromContracts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"api",
								"user",
								"removeFromContracts"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "algorithm",
				"value": "HS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "payload",
				"value": "{}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "result",
			"value": ""
		}
	]
}